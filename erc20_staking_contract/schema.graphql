type User @entity {
  id: Bytes! # address
  totalStaked: BigInt! # Total amount staked by user
  lastStakeTimestamp: BigInt! # Timestamp of last stake
  pendingRewards: BigInt! # Current pending rewards
  totalRewardsClaimed: BigInt! # Total rewards claimed
  stakingHistory: [Staked!]! @derivedFrom(field: "user") # Reference to staking events
  withdrawalHistory: [Withdrawn!]! @derivedFrom(field: "user") # Reference to withdrawal events
  emergencyWithdrawals: [EmergencyWithdrawn!]! @derivedFrom(field: "user") # Reference to emergency withdrawals
  rewardsClaimed: [RewardsClaimed!]! @derivedFrom(field: "user") # Reference to rewards claimed events
}

type Withdrawn @entity(immutable: true) {
  id: Bytes!
  user: User! # Changed from Bytes to User
  amount: BigInt! # uint256
  timestamp: BigInt! # uint256
  newTotalStaked: BigInt! # uint256
  currentRewardRate: BigInt! # uint256
  rewardsAccrued: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type Paused @entity(immutable: true) {
  id: Bytes!
  account: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type RewardRateUpdated @entity(immutable: true) {
  id: Bytes!
  oldRate: BigInt! # uint256
  newRate: BigInt! # uint256
  timestamp: BigInt! # uint256
  totalStaked: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type RewardsClaimed @entity(immutable: true) {
  id: Bytes!
  user: User! # Changed from Bytes to User
  amount: BigInt! # uint256
  timestamp: BigInt! # uint256
  newPendingRewards: BigInt! # uint256
  totalStaked: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type Staked @entity(immutable: true) {
  id: Bytes!
  user: User! # Changed from Bytes to User
  amount: BigInt! # uint256
  timestamp: BigInt! # uint256
  newTotalStaked: BigInt! # uint256
  currentRewardRate: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type StakingInitialized @entity(immutable: true) {
  id: Bytes!
  stakingToken: Bytes! # address
  initialRewardRate: BigInt! # uint256
  timestamp: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type StakingPaused @entity(immutable: true) {
  id: Bytes!
  timestamp: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type StakingUnpaused @entity(immutable: true) {
  id: Bytes!
  timestamp: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type TokenRecovered @entity(immutable: true) {
  id: Bytes!
  token: Bytes! # address
  amount: BigInt! # uint256
  timestamp: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type Unpaused @entity(immutable: true) {
  id: Bytes!
  account: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type OwnershipTransferred @entity(immutable: true) {
  id: Bytes!
  previousOwner: Bytes! # address
  newOwner: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type EmergencyWithdrawn @entity(immutable: true) {
  id: Bytes!
  user: User! # Changed from Bytes to User
  amount: BigInt! # uint256
  penalty: BigInt! # uint256
  timestamp: BigInt! # uint256
  newTotalStaked: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}